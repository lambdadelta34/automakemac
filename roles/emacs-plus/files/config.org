#+TITLE: emacs config
#+OPTIONS: toc:nil

* Configuration
I forgot everything i've done in my previous init.el file, so i decided to start another one from scratch in org-mode to be able to write a lot about stuff happening here.
Also, i'd like to start using org-mode, finally.

** Config initialization
So, we need this to require emacs default package manager and be able to initialize them before configuring them.
[[https://wikemacs.org/wiki/Package.el][link to the doc]]
Also add melpa to package manager.

#+BEGIN_SRC emacs-lisp
(package-initialize)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC

This little dude here is enables lazy loading.

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC

** use-package
This is where the fun begins. It is a elisp macro which goal is to simplify package configuration.
[[https://github.com/jwiegley/use-package][github link]]
Some elisp code to install it if it isn't yet. And ensure that all packages would be installed automatically if they are not.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Preferences
Removes unnecessary window docaration.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

Disable startup menu

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Window frame size

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(width . 200))
(add-to-list 'default-frame-alist '(height . 55))
#+END_SRC

Garbage collection threshold to 20 mb

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1000 1000))
#+END_SRC

Force use of spaces instead of tabs, blahh. And tab width.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

Enable line numbers. I was confused when didn't see line numbers by default.

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC

Ask "y" or "n" instead of "yes" or "no". Yes, laziness is great.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Highlight corresponding parentheses when cursor is on one.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Autorefresh buffers when file changes on disk.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

Remove useless whitespace before saving a file.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Stop creating annoying backup~ files.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Stop creating not less annoying #autosave# files.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

Silent ring bell(really, REALLY? DO I REALLY HAVE TO DO THIS??)

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

Use command as meta key.

#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta
      mac-option-modifier 'none)
#+END_SRC

Org-mode for *scratch* file.

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

*Theme
Dracula, hocho, just a little bite.

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :config
  (load-theme 'dracula t))
#+END_SRC

* Packages

** Genaral
General is very convenient way to bind keys. [[https://github.com/noctuid/general.el][github link]]

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-define-key
    :states '(normal insert emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC"
    "wd" 'delete-window
    "wc" 'delete-other-windows
    "fed" (lambda () (interactive) (find-file user-init-file))
    "feR" 'eval-buffer
    "fs" 'save-buffer
    "qq" 'save-buffers-kill-terminal))
#+END_SRC

** EVIL mode
Because i like vim too.
*** Dependencies
Very cool stuff for undoing things.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer t
  :config
  (global-undo-tree-mode))
#+END_SRC

Just functionality to go to last chages. Nothing fancy here.

#+BEGIN_SRC emacs-lisp
(use-package goto-chg)
#+END_SRC

*** Mode itself & stuff
[[https://github.com/emacs-evil/evil][github link]]

It is strange that evil mode doesn't init when i use =:general= keyword. So i used workaround with =general-define-key= function.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :defer t
  :preface
  (defun copy-to-clipboard ()
    (interactive)
    (if (display-graphic-p)
        (progn
          (call-interactively 'clipboard-kill-ring-save))
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "pbcopy")
            (deactivate-mark)))))

  :init
  (setq evil-motion-state-modes nil)
  :config
  (evil-mode 1)
  (general-define-key
    :states 'normal
    "C-k" 'evil-window-up
    "C-j" 'evil-window-down
    "C-h" 'evil-window-left
    "C-l" 'evil-window-right)
  (general-define-key
    :states 'visual
    "y" 'copy-to-clipboard)
  (general-define-key
    :states 'normal
    :prefix "SPC"
    "wn" 'evil-window-split
    "w/" 'evil-window-vsplit)
  (add-hook 'ruby-mode-hook
            (function (lambda ()
                        (setq evil-shift-width 2))))
  (add-hook 'js-mode-hook
            (function (lambda ()
                        (setq evil-shift-width 2))))
  (unless (display-graphic-p)
    (add-hook 'evil-insert-state-entry-hook (lambda () (send-string-to-terminal "\033[5 q"))) ;; set cursor to bar
    (add-hook 'evil-normal-state-entry-hook (lambda () (send-string-to-terminal "\033[0 q"))))) ;; set cursor to block
#+END_SRC

Surround mode for EVIL. [[https://github.com/emacs-evil/evil-surround][github link]]

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC

Adds args motions and text object. [[https://github.com/wcsmith/evil-args][github link]]

#+BEGIN_SRC emacs-lisp
(use-package evil-args
  :general
  (:keymaps 'evil-inner-text-objects-map
    "a" 'evil-inner-arg)
  (:keymaps 'evil-outer-text-objects-map
    "a" 'evil-outer-arg))
#+END_SRC

Code commentary. [[https://github.com/redguardtoo/evil-nerd-commenter][github link]]

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :defer t
  :general
  (:states 'normal
    "gcc" 'evilnc-comment-or-uncomment-lines)
  (:states 'visual
    "gc" 'evilnc-comment-or-uncomment-lines))
#+END_SRC

** Info mode

[[https://github.com/justbur/emacs-which-key][which-key]] is a package which show info about key sequences.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer t
  :init
  (which-key-mode)
  :config
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-side-window-max-height 0.33
        which-key-idle-delay 0.5))
#+END_SRC

[[https://github.com/milkypostman/powerline][Powerline]] like in vim.

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (powerline-center-evil-theme))
#+END_SRC

** IVY & Search

Everybody looks for something. I do this with swiper and ag.
[[https://github.com/abo-abo/swiper][ivy/swiper]]

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :defer t
  :diminish (ivy-mode . "")
  :general
  (:keymaps 'ivy-minibuffer-map
    "C-j" '(ivy-next-line :which-key "next line")
    "C-k" '(ivy-previous-line :which-key "prev line")
    "C-h" '(ivy-beginning-of-buffer :which-key "beginning of ivy minibuffer")
    "C-l" '(ivy-end-of-buffer :which-key "end if ivy mini buffer")
    "RET" '(ivy-immediate-done :which-key "exits fro mivy search without selecting curent item")
    "C-v" '(ivy-scroll-up-command :which-key "page up ivy buffer")
    "M-v" '(ivy-scroll-down-command :which-key "page down ivy buffer"))
  (:states 'normal
    :prefix "SPC"
    "bs" 'ivy-switch-buffer
    "bn" 'next-buffer
    "bd" 'kill-this-buffer
    "bp" 'previous-buffer)

  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
        magit-completing-read-function 'ivy-completing-read
        ivy-height 20
        ivy-count-format "(%d/%d)"))
#+END_SRC

Wrapper around some emacs commands.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :defer t
  :general
  ("M-x" 'counsel-M-x)
  (:states 'normal
    :prefix "SPC"
    "/" 'counsel-fzf))
#+END_SRC

Search for ivy.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :defer t
  :general
  (:states 'normal
    "C-s" 'swiper
    "/" 'swiper))
#+END_SRC

** Org stuff

Pretty bullets.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (setq org-bullets-bullet-list '("âˆ™"))
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** Projectile

Projects, projects everywhere

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer 2
  :init
  (projectile-mode +1)
  (setq projectile-completion-system 'ivy
        projectile-require-project-root nil
        projectile-enable-caching t)
  :config
  (general-define-key
    :states 'normal
    :keymaps 'projectile-mode-map
    :prefix "SPC"
    "p" 'projectile-command-map
    "ff" 'projectile-find-file))
#+END_SRC

[[https://github.com/leoliu/ggtags][ggtags]] for code navigation

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :defer t)
#+END_SRC

** Magit

I heard [[https://github.com/magit/magit][magit]] to be best git client. Let's see.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :init
  (general-define-key
    :states 'normal
    :prefix "SPC"
    "g" 'magit-status))

#+END_SRC

And, surely, [[https://github.com/emacs-evil/evil-magit][evil-magit]].

#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :after magit)
#+END_SRC

Gitgutter

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :config
  (global-git-gutter-mode t)
  :diminish
  git-gutter-mode)
#+END_SRC

** Ranger

[[ttps://github.com/ralesi/ranger.el][Ranger]] is for dired.

#+BEGIN_SRC emacs-lisp
(use-package ranger
  :config
  (ranger-override-dired-mode 'ranger)
  (add-hook 'ranger-mode-hook 'all-the-icons-dired-mode)
  (general-define-key
    :states 'normal
    :prefix "SPC"
    "d" 'ranger))
#+END_SRC

Icons for dired and ranger.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :defer t)
(use-package all-the-icons-dired
  :defer t)
#+END_SRC

** Programming

Becuse i'm interested in haskell.

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :defer t)
#+END_SRC

Irony for C.

#+BEGIN_SRC emacs-lisp
(use-package irony
  :hook (c-mode . irony-mode))
#+END_SRC
And sometimes need to work with js.

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :defer t
  :mode "\\.js\\'"
  :config
  (setq-default js2-strict-trailing-comma-warning nil))
#+END_SRC

And rjsx.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :defer t)
#+END_SRC
