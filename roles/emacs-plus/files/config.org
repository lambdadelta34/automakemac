#+TITLE: emacs config
#+OPTIONS: toc:nil
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+auto_tangle: t

* Configuration
I forgot everything i've done in my previous init.el file, so i decided to start another one from scratch in org-mode to be able to write a lot about stuff happening here.
Also, i'd like to start using org-mode, finally.

** Short yes/no prompt

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Startup time

Garbage collection threshold to 20 mb.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1000 1000))
(setq read-process-output-max (* 1024 1024 3))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'my/display-startup-time)
#+END_SRC

** Config initialization

Bootstrapping of [[https://github.com/radian-software/straight.el][straight.el]].

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

Suppress native compilation warnings.

#+BEGIN_SRC emacs-lisp
(setq native-comp-async-report-warnings-errors nil)
#+END_SRC

Gitlab auth.

#+BEGIN_SRC emacs-lisp
(setq auth-sources '("~/.emacs.d/.authinfo.gpg"))
#+END_SRC

** use-package

This is where the fun begins. It is an elisp macro which goal is to simplify package configuration.
[[https://github.com/jwiegley/use-package][github link]]
Some elisp code to install it if it isn't yet. And ensure that all packages would be installed automatically if they are not.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(use-package straight
             :custom (straight-use-package-by-default t))
(setq use-package-always-demand t)
#+END_SRC

* Preferences

Leader key for evil mode.

#+BEGIN_SRC emacs-lisp
(setq leader "SPC")
(setq alt-leader "M-SPC")
#+END_SRC

Font.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Hack Nerd Font 12"))
#+END_SRC

Removes unnecessary window docaration.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

Disable startup menu.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Window frame size.

#+BEGIN_SRC emacs-lisp
;; (toggle-frame-fullscreen)
(add-to-list 'default-frame-alist '(fullscreen . fullboth))
;; (add-hook )
;; (add-to-list 'default-frame-alist '(width . 200))
;; (add-to-list 'default-frame-alist '(height . 55))
#+END_SRC

Force use of spaces instead of tabs, blahh. And tab width.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

Enable line numbers. I was confused when i didn't see line numbers by default.

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC

Highlight corresponding parentheses when cursor is on one.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-style 'mixed)
#+END_SRC

Autorefresh buffers when file changes on disk.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

Remove useless whitespace before saving a file.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'd-trailing-whitespace)
(defun d-trailing-whitespace ()
  (unless (derived-mode-p 'markdown-mode)
    (delete-trailing-whitespace)))
#+END_SRC

Not that I needed to backup, but it's better to be safe than sorry.

#+BEGIN_SRC emacs-lisp
(setq vc-make-backup-files t ;; emacs doesn't do backup for VCed files
      version-control t      ;; Use version numbers for backups.
      kept-new-versions 10   ;; Number of newest versions to keep.
      kept-old-versions 0    ;; Number of oldest versions to keep.
      delete-old-versions t  ;; Don't ask to delete excess backup versions.
      backup-by-copying t    ;; Copy all files, don't rename them.
      backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

Stop creating not less annoying #autosave# files.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

Silent ring bell(really, REALLY? DO I REALLY HAVE TO DO THIS??)

#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+END_SRC

Org-mode for *scratch* file.

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

* Theme

Themes block.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom
  (modus-themes-italic-constructs t)
  (modus-themes-bold-constructs t)
  ;; (modus-themes-tabs-accented t)
  (modus-themes-paren-match '(bold intense))
  (modus-themes-prompts '(bold intense))
  (modus-themes-org-blocks 'tinted-background)
  (modus-themes-region '(bg-only accented))
  (modus-themes-mode-line '(accented borderless))
  (modus-themes-hl-line '(underline accented intense))
  (modus-themes-completions '((matches . (extrabold background intense))
                              (selection . (semibold accented intense))
                              (popup . (accented intense)))
                              )
  (modus-themes-headings
    '(
     (1 . (rainbow overline background variable-pitch 1.4))
     (2 . (rainbow background 1.3))
     (3 . (rainbow bold 1.2))
     (t . (semilight 1.1))
    ))
  (modus-themes-scale-headings t)
  (modus-themes-variable-pitch-ui t)
  (modus-themes-subtle-line-numbers t)
  :config
  (load-theme 'modus-operandi)
)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/packages.org")
#+END_SRC

* Keybindings

#+BEGIN_SRC emacs-lisp
(org-babel-load-file "~/.emacs.d/keymaps.org")
#+END_SRC

* Fun
** Nyan-cat

[[https://github.com/TeMPOraL/nyan-mode][Nyan cat]] in the tray.

#+BEGIN_SRC emacs-lisp
;; (use-package nyan-mode
  ;; (setq nyan-wavy-trail t
  ;;       nyan-animate-nyancat t)
  ;; :config
  ;; (nyan-mode))
#+END_SRC

* TODOs
* Problems to solve
** TODO .dir-locals.el with ranger
It just freezes. Fix that.
** DONE emacsclient from mac os launchpad
For now I use function with focus on frame.
** TODO eshell at-point-autocomplete(or maybe use term)
** DONE disable TABing eshell in modes other than org
** DONE emacs --daemon doesn't open files
Strange thing with termcap. "Device is not a termcap terminal device".
Happend to be some bug with evil mode post-command-hook (evil-mode-check-buffers).
[[#evil-daemon]] - caused problem. I gotta look into how to make it lazy.
** DONE emacs --daemon doesn't know about projects at startup
Related to evil stuff. [[#evil-daemon]] problem.
