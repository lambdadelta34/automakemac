#+TITLE: emacs config
#+OPTIONS: toc:nil

* Configuration
I forgot everything i've done in my previous init.el file, so i decided to start another one from scratch in org-mode to be able to write a lot about stuff happening here.
Also, i'd like to start using org-mode, finally.

** Config initialization

Bootstrapping of [[https://github.com/radian-software/straight.el][straight.el]].

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

Suppress native compilation warnings.

#+BEGIN_SRC emacs-lisp
(setq native-comp-async-report-warnings-errors nil)
#+END_SRC

** use-package

This is where the fun begins. It is an elisp macro which goal is to simplify package configuration.
[[https://github.com/jwiegley/use-package][github link]]
Some elisp code to install it if it isn't yet. And ensure that all packages would be installed automatically if they are not.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(use-package straight
             :custom (straight-use-package-by-default t))
(setq use-package-always-demand t)
#+END_SRC

* Preferences

Leader key for evil mode.

#+BEGIN_SRC emacs-lisp
(setq leader "SPC")
(setq alt-leader "C-SPC")
#+END_SRC

Font.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Hack Nerd Font 12"))
#+END_SRC

Removes unnecessary window docaration.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

Disable startup menu.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

Window frame size.

#+BEGIN_SRC emacs-lisp
;; (toggle-frame-fullscreen)
(add-to-list 'default-frame-alist '(fullscreen . fullboth))
;; (add-hook )
;; (add-to-list 'default-frame-alist '(width . 200))
;; (add-to-list 'default-frame-alist '(height . 55))
#+END_SRC

Garbage collection threshold to 20 mb.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 20 1000 1000))
(setq read-process-output-max (* 1024 1024 3))
#+END_SRC

Force use of spaces instead of tabs, blahh. And tab width.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

Enable line numbers. I was confused when i didn't see line numbers by default.

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
#+END_SRC

Highlight corresponding parentheses when cursor is on one.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-style 'mixed)
#+END_SRC

Autorefresh buffers when file changes on disk.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

Remove useless whitespace before saving a file.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'd-trailing-whitespace)
(defun d-trailing-whitespace ()
  (unless (derived-mode-p 'markdown-mode)
    (delete-trailing-whitespace)))
#+END_SRC

Not that I needed to backup, but it's better to be safe than sorry.

#+BEGIN_SRC emacs-lisp
(setq vc-make-backup-files t ;; emacs doesn't do backup for VCed files
      version-control t      ;; Use version numbers for backups.
      kept-new-versions 10   ;; Number of newest versions to keep.
      kept-old-versions 0    ;; Number of oldest versions to keep.
      delete-old-versions t  ;; Don't ask to delete excess backup versions.
      backup-by-copying t    ;; Copy all files, don't rename them.
      backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

Stop creating not less annoying #autosave# files.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

Silent ring bell(really, REALLY? DO I REALLY HAVE TO DO THIS??)

#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+END_SRC

Org-mode for *scratch* file.

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

* Theme

Themes block.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :custom
  (modus-themes-italic-constructs t)
  (modus-themes-bold-constructs t)
  ;; (modus-themes-tabs-accented t)
  (modus-themes-paren-match '(bold intense))
  (modus-themes-prompts '(bold intense))
  (modus-themes-org-blocks 'tinted-background)
  (modus-themes-region '(bg-only accented))
  (modus-themes-mode-line '(accented borderless))
  (modus-themes-hl-line '(underline accented intense))
  (modus-themes-completions '((matches . (extrabold background intense))
                              (selection . (semibold accented intense))
                              (popup . (accented intense)))
                              )
  (modus-themes-headings
    '(
     (1 . (rainbow overline background variable-pitch 1.4))
     (2 . (rainbow background 1.3))
     (3 . (rainbow bold 1.2))
     (t . (semilight 1.1))
    ))
  (modus-themes-scale-headings t)
  (modus-themes-variable-pitch-ui t)
  (modus-themes-subtle-line-numbers t)
  :config
  (load-theme 'modus-operandi)
  :bind ("<f5>" . modus-themes-toggle)
)
#+END_SRC

* Packages
** General(general.el, not general config)

[[https://github.com/noctuid/general.el][General]] is very convenient way to bind keys.

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-define-key
    :states '(normal insert emacs)
    :prefix leader
    :non-normal-prefix alt-leader
    "wd" 'delete-window
    "wc" 'delete-other-windows
    "fed" (lambda () (interactive) (find-file user-init-file))
    "feR" 'eval-buffer
    "fs" 'save-buffer
    "qq" 'save-buffers-kill-terminal))
#+END_SRC

** EVIL mode
Because i like vim too.
*** Dependencies
Very cool stuff for undoing things.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :custom
  (undo-tree-auto-save-history t)
  (undo-tree-visualizer-diff t)
  (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  :config
  (general-define-key
    :states 'normal
    :prefix leader
    "u" 'undo-tree-visualize)
  (global-undo-tree-mode 1)
)
#+END_SRC

Just functionality to go to last chages. Nothing fancy here.

#+BEGIN_SRC emacs-lisp
(use-package goto-chg)
#+END_SRC

*** Mode itself & stuff

[[https://github.com/emacs-evil/evil][Evil]] itself.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :defer t
  :preface
  (defun my/_as-word ()
    (modify-syntax-entry ?_ "w"))
  (defun my/tab2 ()
    (setq evil-shift-width 2))
  (defun my/tab4 ()
    (setq evil-shift-width 4))
  (defun my/copy-to-clipboard ()
    (interactive)
    (if (display-graphic-p)
        (progn
          (call-interactively 'clipboard-kill-ring-save))
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "pbcopy")
            (deactivate-mark)))))

  (defun my/move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun my/move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))
  :init
  (setq evil-want-keybinding nil)
  :custom
  (evil-motion-state-modes nil)
  (evil-shift-width 2)
  (evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (general-define-key
    :states '(normal)
    "C-k" 'evil-window-up
    "C-j" 'evil-window-down
    "C-h" 'evil-window-left
    "C-l" 'evil-window-right)

  (general-define-key
    :states 'normal
    "Q" 'quit-window
    "[e" 'my/move-line-down
    "]e" 'my/move-line-up)

  (general-define-key
    :states '(normal visual)
    "[e" 'my/move-line-down
    "]e" 'my/move-line-up)

  (general-define-key
    :states 'visual
    "y" 'my/copy-to-clipboard
    "gs" 'sort-lines)

  (general-define-key
    :states 'normal
    :prefix leader
    "wn" 'evil-window-split
    "w/" 'evil-window-vsplit)
  (add-hook 'view-mode-hook 'evil-motion-state)
  (add-hook 'ruby-mode-hook 'my/tab2)
  (add-hook 'css-mode-hook 'my/tab2)
  (add-hook 'rust-mode-hook 'my/tab4)
  (add-hook 'js2-mode-hook 'my/tab2)
  (add-hook 'prog-mode-hook 'my/_as-word))
#+END_SRC

[[https://github.com/emacs-evil/evil-collection][Evil-colletion]] replaces keys for some modes.

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :custom
  (evil-collection-mode-list nil)
  (evil-collection-mode-list '(
    (buff-menu "buff-menu")
    ;; company
    consult
    corfu
    debug
    doc-view
    eshell
    evil-mc
    flycheck
    ibuffer
    info
    ;; imenu-list
    ;; ivy
    help
    helpful
    man
    magit
    outline
    (package-menu package)
    ))
    ;; process-menu
    ;; simple))
    ;; view))
  :config
  (evil-collection-init))
#+END_SRC

[[https://github.com/emacs-evil/evil-surround][Surround mode]] mode for EVIL.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+END_SRC

Adds [[https://github.com/wcsmith/evil-arg][args]] motions and text object.

#+BEGIN_SRC emacs-lisp
(use-package evil-args
  :after evil
  :general
  (:keymaps 'evil-inner-text-objects-map
    "a" 'evil-inner-arg)
  (:keymaps 'evil-outer-text-objects-map
    "a" 'evil-outer-arg))
#+END_SRC

Code [[https://github.com/redguardtoo/evil-nerd-commenter][commentary]].

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :defer t
  :general
  (:states '(normal visual)
    "gy" 'evilnc-comment-or-uncomment-lines)
  )
#+END_SRC

*** Evil-daemon problem.
:PROPERTIES:
:CUSTOM_ID: evil-daemon
:END:

#+BEGIN_SRC emacs-lisp
;;  (unless (display-graphic-p)
;;    (add-hook 'evil-insert-state-entry-hook (lambda () (send-string-to-terminal "\033[5 q"))) ;; set cursor to bar
;;    (add-hook 'evil-normal-state-entry-hook (lambda () (send-string-to-terminal "\033[0 q"))))) ;; set cursor to block
#+END_SRC

** Indent guide

[[https://github.com/DarthFennec/highlight-indent-guides][Indent]] guide with vertical bars. (laggy)

#+BEGIN_SRC emacs-lisp
;; (use-package highlight-indent-guides
;;   :init
;;   (setq highlight-indent-guides-method 'column
;;         highlight-indent-guides-delay 1
;;         highlight-indent-guides-responsive 'stack
;;         ;; highlight-indent-guides-auto-odd-face-perc 15
;;         ;; highlight-indent-guides-auto-even-face-perc 15
;;         ;; highlight-indent-guides-auto-character-face-perc 20
;;         )
;;   :config
;;   (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
;;   (add-hook 'highlight-indent-guides-mode-hook 'highlight-indent-guides-auto-set-faces))
#+END_SRC

** Expanding

[[https://github.com/magnars/expand-region.el][Expand region]] helps to quickly select with expanding region.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :custom
  (expand-region-contract-fast-key "z")
  :config
  (general-define-key
    :states 'normal
    :prefix leader
    "x" 'er/expand-region))
#+END_SRC

** Jumping

[[https://github.com/abo-abo/avy][Avy]] jump mode.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (general-define-key
    :states 'normal
    "gw" 'avy-goto-word-1
    "gc" 'avy-goto-char
    "gl" 'avy-goto-line)
  (general-define-key
    :states 'insert
    "C-;" 'avy-goto-char)
)

#+END_SRC

** EMOJI!

[[https://github.com/iqbalansari/emacs-emojify][Emojification]] for emacs.

#+BEGIN_SRC emacs-lisp
(use-package emojify
)
#+END_SRC

** Info

[[https://github.com/justbur/emacs-which-key][which-key]] is a package which show info about key sequences.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer t
  :config
  (which-key-mode)
  :custom
  (which-key-sort-order 'which-key-key-order-alpha)
  (which-key-side-window-max-height 0.33)
  (which-key-idle-delay 0.5)
 )
#+END_SRC

[[https://github.com/emacsmirror/rainbow-mode][Rainbow-mode]] colors hexlike strings.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :config (global-hl-todo-mode)
)

(use-package imenu-list
  :config
  (general-define-key
    :states 'normal
    :keymaps 'imenu-list-major-mode-map
    "k" 'previous-line
    "j" 'next-line
    "TAB" 'hs-toggle-hiding
    "RET" 'imenu-list-ret-dwim
    "q" 'imenu-list-quit-window
  )
)
#+END_SRC

Modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-buffer-file-name-style 'relative-to-project)
  ;; (doom-modeline-minor-modes t)
  (doom-modeline-enable-word-count t)
  (doom-modeline-default-eol-type 2)
  ;; (doom-modeline-indent-info t)
  (doom-modeline-vcs-max-length 15)
  (doom-modeline-modal-icon nil)
  :init
  (doom-modeline-mode)
 )

(use-package keycast
  :after doom-modeline
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" keycast-mode-line " ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (remove '("" keycast-mode-line " ") global-mode-string))))
  (keycast-mode)
 )

(use-package minions
  :custom
  (minions-mode-line-lighter ">>>")
  (minions-prominent-modes '(flycheck-mode projectile-mode lsp-mode))
  (minions-available-modes nil)
  :config
  (minions-mode 1)
)
#+END_SRC

[[https://github.com/elpa-host/goto-line-preview][Goto-line]] preview.

#+BEGIN_SRC emacs-lisp
(use-package goto-line-preview
  :config
  (general-define-key
    [remap goto-line] 'goto-line-preview))
#+END_SRC

** Better help

#+BEGIN_SRC emacs-lisp
(use-package helpful
)
#+END_SRC

** Search

Try [[https://github.com/minad/vertico][vertico]] & [[https://github.com/minad/consult][consult]].

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :custom
  (vertico-cycle t)
  :config
  (vertico-mode)
  (general-define-key
    :keymaps 'vertico-map
    "C-j" '(vertico-next :which-key "next line")
    "C-k" '(vertico-previous :which-key "prev line")
    ;; "C-l" '(vertico-submit-exact-input :which-key "submit exact input")
  )
)
(use-package consult
  :preface
  (defun my/grep-word-visual ()
    (interactive)
    (consult-ripgrep (projectile-project-root) (buffer-substring
      (evil-range-beginning (evil-visual-range))
      (evil-range-end (evil-visual-range)))))
  (defun my/grep-word ()
    (interactive)
    (consult-ripgrep (projectile-project-root) (thing-at-point 'word)))
  (defun my/consult-word ()
    (interactive)
    (consult-line (thing-at-point 'word)))
  :custom
  (register-preview-delay 0)
  (register-preview-function #'consult-register-format)
  (consult-ripgrep-command "rg --null --smart-case --line-buffered --color=always --max-columns=500\
    --no-heading --line-number . -e ARG OPTS")
  (consult-project-root-function #'projectile-project-root)
  (consult-preview-key 'any)
  :init
  (advice-add #'register-preview :override #'consult-register-window)
  :config
  ;;(general-define-key
  ;;  :keymaps 'isearch-mode-map
  ;;)
  (general-define-key
    :states 'normal
    "M-g g" 'consult-goto-line
    "/" 'consult-line
    "*" 'consult-ripgrep
  )
  (general-define-key
    :states 'normal
    :prefix leader
    "/" 'my/consult-word
    "bs" 'consult-buffer
    "*" 'my/grep-word
    "M-y" 'consult-yank-pop
  )
  (general-define-key
    :states 'visual
    :prefix leader
    "*" 'my/grep-word-visual
  )
  (autoload 'projectile-project-root "projectile")
)

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles . (partial-completion)))))
)
#+END_SRC

*** Enhancements

#+BEGIN_SRC emacs-lisp
(use-package prescient
)

(use-package vertico-prescient
  :after (vertico prescient)
  :config
  (prescient-persist-mode)
  (vertico-prescient-mode)
)

(use-package savehist
  :config
  (savehist-mode))

(use-package embark-consult
  :after (consult embark)
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode)
)

(use-package consult-flycheck
  :general
  (:keymaps 'flycheck-command-map
    "!" 'consult-flycheck)
)

(use-package marginalia
  :config
  (marginalia-mode)
)
(use-package embark
  :custom
  (embark-action-indicator
    (lambda (map &optional _target)
      (which-key--show-keymap "Embark" map nil nil 'no-paging)
      #'which-key--hide-popup-ignore-command)
    embark-become-indicator embark-action-indicator)
  (defun store-action-key+cmd (cmd)
    (setq keycast--this-command-keys (this-single-command-keys)
          keycast--this-command cmd))
  (defun force-keycast-update (&rest _)
    (force-mode-line-update t))
  :config
  (advice-add 'embark-keymap-prompter :filter-return #'store-action-key+cmd)
  (dolist (cmd '(embark-act embark-act-noexit embark-become))
    (advice-add cmd :before #'force-keycast-update))
  (general-define-key
    "C-s-a" 'embark-act
  )
)
#+END_SRC

** Org stuff

Just for org-mode config.

#+BEGIN_SRC emacs-lisp
(use-package org
  :straight nil
  :custom
  (org-src-tab-acts-natively nil)
  :config
  (general-define-key
    :states '(normal)
    :keymaps 'org-mode-map
    "TAB" 'org-cycle)
)

(use-package org-appear
  :custom
  (org-appear-autosubmarkers t)
  (org-appear-autoentities t)
  (org-appear-autolinks t)
  (org-appear-autokeywords t)
  (org-appear-delay 0.1)
  (org-appear-trigger 'manual)
  :hook
  (org-mode . org-appear-mode)
  :config
  (add-hook 'org-mode-hook (lambda ()
                           (add-hook 'evil-insert-state-entry-hook
                                     #'org-appear-manual-start
                                     nil
                                     t)
                           (add-hook 'evil-insert-state-exit-hook
                                     #'org-appear-manual-stop
                                     nil
                                     t)))
)

(use-package org-modern
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  :custom
  (org-modern-block-name nil)
  (org-auto-align-tags nil)
  (org-tags-column 0)
  (org-catch-invisible-edits 'show-and-error)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)

  ;; Org styling, hide markup etc.
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-ellipsis "…")

  ;; Agenda styling
  (org-agenda-tags-column 0)
  (org-agenda-block-separator ?─)
  (org-agenda-time-grid
  '((daily today require-timed)
    (800 1000 1200 1400 1600 1800 2000)
    " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
  (org-agenda-current-time-string "⭠ now ─────────────────────────────────────────────────")
)
#+END_SRC

Pretty bullets.

#+BEGIN_SRC emacs-lisp
;; (use-package org-bullets
;;   :custom
;;   (org-bullets-bullet-list '("∙"))
;;   :config
;;   (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** Projectile

[[https://docs.projectile.mx/en/latest][Projects]], projects everywhere.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :preface
  (defun my/projectile-ranger ()
    "Use ranger instead of dired"
    (interactive)
    (ranger (projectile-ensure-project (projectile-project-root))))
  :custom
  (projectile-enable-caching t)
  (projectile-completion-system 'default)
  (projectile-require-project-root nil)
  (projectile-switch-project-action 'my/projectile-ranger)
  :config
  (projectile-mode)
  ;; (projectile-register-project-type 'npm '("package.json")
  ;;                                   :project-file "package.json"
  ;;                                   :compile "npm install"
  ;;                                   :test "npm test"
  ;;                                   :run "npm run start_dev"
  ;;                                   :test-suffix ".spec")
  (general-define-key
    :states 'normal
    :keymaps 'projectile-mode-map
    :prefix leader
    "p" 'projectile-command-map
    "ff" 'projectile-find-file))
#+END_SRC

** Magit

I heard [[https://github.com/magit/magit][magit]] to be best git client. Let's see.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (general-define-key
    :states 'normal
    :prefix leader
    "g" 'magit-status)
  (general-define-key
    :prefix leader
    :states 'normal
    "C-b" 'magit-blame-addition))

(use-package git-timemachine
  :straight (:host github :repo "emacsmirror/git-timemachine")
  :config
  (general-define-key
    :states 'normal
    :prefix leader
    "h" 'git-timemachine-toggle)
  (general-define-key
    :keymaps 'git-timemachine-mode-map
    :states 'normal
    "q" 'git-timemachine-quit
    "p" 'git-timemachine-show-previous-revision
    "n" 'git-timemachine-show-next-revision
    "c" 'git-timemachine-show-current-revision
    )
  )

#+END_SRC

Gitgutter

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :config
  (global-git-gutter-mode t)
  :diminish
  git-gutter-mode)
#+END_SRC

** Ranger

[[https://github.com/ralesi/ranger.el][Ranger]] is for dired.

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :custom
    (ranger-show-hidden 'prefer)
    :config
    (add-to-list 'ranger-prefer-regexp "^\\.")
    (ranger-override-dired-mode 'ranger)
    (add-hook 'ranger-mode-hook 'all-the-icons-dired-mode)

    (general-define-key
     :states '(normal visual)
     "TAB" 'ranger)

    (general-define-key
      :keymaps 'ranger-normal-mode-map
      "c" 'find-file
      "f" 'projectile-find-file)
    (general-define-key
     :states 'normal
     :prefix leader
     "d" 'ranger))
#+END_SRC

Icons for dired and ranger.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :defer t)
(use-package all-the-icons-dired
  :defer t)
#+END_SRC

** Cursors

Evil [[https://github.com/gabesoft/evil-mc][multicursor]].

#+BEGIN_SRC emacs-lisp
(use-package evil-mc
  :config
  (global-evil-mc-mode  1)
  (general-define-key
    :states 'normal
    "grm" 'evil-mc-make-all-cursors
    "gru" 'evil-mc-undo-last-added-cursor
    "grq" 'evil-mc-undo-all-cursors
    "grs" 'evil-mc-pause-cursors
    "grr" 'evil-mc-resume-cursors
    "grf" 'evil-mc-make-and-goto-first-cursor
    "grl" 'evil-mc-make-and-goto-last-cursor
    "grh" 'evil-mc-make-cursor-here
    "grj" 'evil-mc-make-cursor-move-next-line
    "grk" 'evil-mc-make-cursor-move-prev-line
    "M-n" 'evil-mc-make-and-goto-next-cursor
    "grN" 'evil-mc-skip-and-goto-next-cursor
    "M-p" 'evil-mc-make-and-goto-prev-cursor
    "grP" 'evil-mc-skip-and-goto-prev-cursor
    "C-n" 'evil-mc-make-and-goto-next-match
    "grn" 'evil-mc-skip-and-goto-next-match
    "C-t" 'evil-mc-skip-and-goto-next-match
    "C-p" 'evil-mc-make-and-goto-prev-match
    "grp" 'evil-mc-skip-and-goto-prev-match))
#+END_SRC

Cursor highlighting.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
  (setq beacon-blink-when-focused t
        beacon-color "#ee6bff"
        beacon-blink-duration 0.5
        beacon-size 70
        beacon-blink-when-point-moves-vertically 15))
#+END_SRC

** Autocomplete

[[https://github.com/minad/corfu][Corfu]] seems like one.

#+BEGIN_SRC emacs-lisp
(use-package corfu-prescient
  :after (corfu prescient)
)
(use-package corfu
  :init
  (defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico is not active."
  (unless (bound-and-true-p vertico--input)
    (corfu-mode 1)))
  :custom
  (corfu-auto t)
  (corfu-auto-prefix 0)
  (corfu-auto-delay 0.1)
  (corfu-echo-documentation 0.25)
  (corfu-cycle t)
  :init
  (global-corfu-mode)
  (corfu-prescient-mode 1)
  :config
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  (general-define-key
    :keymaps 'corfu-map
    "C-j" 'corfu-next
    "C-k" 'corfu-previous
    "<return>" 'newline
    "C-l" 'corfu-complete)
)
#+END_SRC

** Parentheses

[[https://github.com/tsdh/highlight-parentheses.el][Highlight]] matching parentheses.

#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses
  :hook ((ruby-mode
          emacs-lisp-mode
          lisp-mode) . highlight-parentheses-mode)
  :custom
  (hl-paren-colors '("magenta1" "DeepSkyBlue1" "goldenrod2" "black"))
)
#+END_SRC

[[https://github.com/Fanael/rainbow-delimiters][Rainbow]] delimeters.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Tabs

[[https://github.com/manateelazycat/awesome-tab][Awesome tab]] for tabs.

Author doesn't like melpa, so I have to git clone that stuff and update by pulling.

#+BEGIN_SRC emacs-lisp
(use-package awesome-tab
  :straight (:host github :repo "manateelazycat/awesome-tab")
  :custom
  (awesome-tab-style 'alternate)
        ;; awesome-tab-background-color "#282a36")
  (awesome-tab-height 120)
  (awesome-tab-active-bar-height 20)
  :custom-face
  (awesome-tab-unselected ((t :background "#8BE9FD")))
  (awesome-tab-selected ((t :background "#bd93f9")))
  :config
  (awesome-tab-mode t)
  )
#+END_SRC

He also created [[https://github.com/manateelazycat/awesome-pair][awesome pair]].

#+BEGIN_SRC emacs-lisp
(use-package awesome-pair
  :straight (:host github :repo "manateelazycat/awesome-pair")
  :config
  (dolist (modes (list
                'haskell-mode-hook
                'emacs-lisp-mode-hook
                'lisp-interaction-mode-hook
                'lisp-mode-hook
                'ruby-mode-hook
                ))
    (add-hook modes #'(lambda () (awesome-pair-mode 1))))
  (general-define-key
    :keymaps 'awesome-pair-mode-map
    "(" 'awesome-pair-open-round
    "[" 'awesome-pair-open-bracket
    "{" 'awesome-pair-open-curly
    "=" 'awesome-pair-equal
    ;; "%" 'awesome-pair-match-paren
    "C-'" 'awesome-pair-unwrap
  )
)

#+END_SRC

** Term

Eshell config.

#+BEGIN_SRC emacs-lisp
(use-package eshell
  ;; :ensure nil
  :straight nil
  :preface
  (defun my/eshell ()
    (interactive)
    (eshell '(-1)))
  :config
  (add-hook
    'eshell-mode-hook
    (lambda ()
      (setq pcomplete-cycle-completions nil)))
  ;; (general-define-key
  ;;   :states '(normal insert)
  ;;   "M-q" ) ;; eshell/exit
  (general-define-key
    :states '(normal insert)
    "C-," 'my/eshell))
    ;; "C-," 'eshell)) ;; "C-i" causes starting eshell with TAB too. crazy stuff
#+END_SRC

[[https://github.com/dieggsy/esh-autosuggest/][Eshell]] autosuggest.

#+BEGIN_SRC emacs-lisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode))
#+END_SRC

Term extra info.

#+BEGIN_SRC emacs-lisp
(use-package eshell-prompt-extras
  :custom
  (eshell-highlight-prompt nil)
  (eshell-prompt-function 'epe-theme-lambda)
  :config
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
 )
#+END_SRC

** Visual killring

[[https://github.com/browse-kill-ring/browse-kill-ring][Visual killring]] extension.

#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
  :config
  (add-hook 'browse-kill-ring-hook 'evil-normal-state)
  (general-define-key
    :states 'normal
    :keymaps 'browse-kill-ring-mode-map
    "q" 'browse-kill-ring-quit
    "RET" 'browse-kill-ring-insert-and-quit)
  (general-define-key
    :states '(normal insert)
    "M-y" 'browse-kill-ring))

#+END_SRC

** LSP

Experimenting with [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]].

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook
  (
    (typescript-mode . lsp)
    (rust-mode . lsp)
    (ruby-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-completion-mode . my/lsp-mode-setup-completion)
  )
  :init
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
      '(flex)))
  :custom
  (lsp-enable-snippet nil)
  (lsp-auto-guess-root t)
  (lsp-completion-provider :none)
  (lsp-modeline-diagnostics-enable t)
  (lsp-dired-mode t)
  (lsp-before-save-edits t)
  (lsp-disabled-clients '(eslint))
  (lsp-modeline-diagnostics-scope :project)
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-reborrow-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-server-display-inlay-hints t)
        ;; lsp-auto-configure nil

)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :config
  (dap-auto-configure-mode 1)
)
#+END_SRC

Comes with [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]].

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-sideline-show-hover t)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (add-hook 'haskell-mode-hook 'flycheck-mode)
  (add-hook 'ruby-mode-hook 'flycheck-mode)
  (add-hook 'js2-mode-hook 'flycheck-mode)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package consult-lsp
    :config
    (general-define-key
      :states 'normal
      :prefix leader
      "ss" 'consult-lsp-symbols
      "sf" 'consult-lsp-file-symbols
      )
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-haskell
  :custom
  (lsp-haskell-process-path-hie "hie-wrapper")
)
#+END_SRC

** Lint

[[https://www.flycheck.org/en/latest/][Flycheck]] is good.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :preface
  (defun my/inner-fix (executable refactor-command)
    (let* (
           (fixing-filename (buffer-file-name))
           (my-shell-command (format "%s %s %s" executable refactor-command fixing-filename))
      )
      (message (concat "fixing the " fixing-filename))
      (message (concat "with " my-shell-command))
      (with-temp-buffer
        (async-shell-command my-shell-command))))

  (defun my/hlint-fix-buffer ()
    (my/inner-fix flycheck-haskell-hlint-executable "--refactor --refactor-options='-i' "))

  (defun my/rubocop-fix-buffer ()
    (my/inner-fix flycheck-ruby-rubocop-executable "-A"))

  (defun my/fix-buffer ()
    (interactive)
    (cond ((equal major-mode 'haskell-mode) (my/hlint-fix-buffer))
          ((equal major-mode 'ruby-mode) (my/rubocop-fix-buffer))
    ))

  (defun my/rubocop-fix-file-and-revert ()
    (interactive)
    (my/fix-buffer))
    ;; (revert-buffer t t))

  (defun my/eslint-from-node-modules ()
    "function to find eslint in project folder, not globally"
    (let ((root (locate-dominating-file
                 (or (buffer-file-name) default-directory)
                 (lambda (dir)
                   (let ((eslint (expand-file-name "node_modules/.bin/eslint" dir)))
                     (and eslint (file-executable-p eslint)))))))
      (when root
        (let ((eslint (expand-file-name "node_modules/.bin/eslint" root)))
          (setq-local flycheck-javascript-eslint-executable eslint)))))
  (defun my/tslint-from-node-modules ()
    "function to find tslint in project folder, not globally"
    (let ((root (locate-dominating-file
                 (or (buffer-file-name) default-directory)
                 (lambda (dir)
                   (let ((tslint (expand-file-name "node_modules/.bin/tslint" dir)))
                     (and tslint (file-executable-p tslint)))))))
      (when root
        (let ((tslint (expand-file-name "node_modules/.bin/tslint" root)))
          (setq-local flycheck-typescript-tslint-executable tslint)))))
  :custom
  (flycheck-ruby-rubocop-executable "rubocop")
  (flycheck-haskell-hlint-executable "hlint")
  :config
  (global-flycheck-mode)
  (general-define-key
    :states 'normal
    :prefix leader
    "fx" 'my/fix-buffer
  )
  (add-hook 'flycheck-mode-hook 'my/eslint-from-node-modules)
  (add-hook 'flycheck-mode-hook 'my/tslint-from-node-modules)
  ;; (add-hook 'flycheck-mode-hook 'ggtags-mode)
  )
#+END_SRC

** Programming

#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode)
#+END_SRC

MD mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  ;; :ensure t
  :mode ("\\.md\\'" . gfm-mode)
  :custom
  (markdown-command "pandoc")
)
#+END_SRC

[[https://github.com/yoshiki/yaml-mode][Yaml]] mode.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
)
#+END_SRC

[[https://github.com/slim-template/emacs-slim][Slim]].

#+BEGIN_SRC emacs-lisp
(use-package slim-mode
  )
#+END_SRC

Rust.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :custom
  (rust-format-on-save t)
  (rust-indent-offset 4)
)
#+END_SRC


Becuse i'm interested in haskell.

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :defer t
  :mode
    ("\\.l?hs\\'" . haskell-mode)
  ;; :preface
  ;; (defun my/autocomplete ()
  ;;   (add-to-list 'company-backends 'company-ghc))
  :custom
  (haskell-tags-on-save t)
  (hout-query t)
  (haskell-process-type 'stack-ghci)
  (haskell-stylish-on-save t)
  (haskell-compile-cabal-build-command "stack build")
  :config
  (general-define-key
    ;; :prefix leader
    :keymaps 'haskell-mode-map
    "C-]" 'haskell-mode-tag-find
  )
  ;; (add-hook 'haskell-mode-hook 'my/autocomplete)
  ;; (add-hook 'haskell-mode-hook 'turn-on-haskell-unicode-input-method) ;; nope
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
)

;; (use-package company-ghc)
#+END_SRC

Irony for C.

#+BEGIN_SRC emacs-lisp
(use-package irony
  :hook (c-mode . irony-mode))
#+END_SRC

And sometimes need to work with js.

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :defer t
  :mode "\\.js\\'"
  :custom
  (js-indent-level 2)
  :config
  (add-hook 'js2-mode-hook 'js2-mode-hide-warnings-and-errors)
  (setq-default js2-strict-trailing-comma-warning nil))
#+END_SRC

And ts

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :defer t
  :mode "\\.tsx?\\'"
  :custom
  (typescript-indent-level 2)
  )
#+END_SRC

And rjsx.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :defer t)
#+END_SRC

Ruby mode settings.

This code adds car regexg to cdr face family. Basically car gets style of cdr.
Oh, and this chages apply to ruby-mode.

#+BEGIN_SRC emacs-lisp
;; (font-lock-add-keywords 'ruby-mode
;;     '(("FOOD" . font-lock-function-name-face)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  ;; :ensure nil
  :straight nil
  :custom
  (ruby-insert-encoding-magic-comment nil)
  :config
  (font-lock-add-keywords 'ruby-mode
        '(("\\([A-Z][a-z]*?\\)\(.*?\)" 1 font-lock-function-name-face))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ruby-end)
#+END_SRC

Pry.

#+BEGIN_SRC emacs-lisp
(use-package inf-ruby
  :config
  (general-define-key
    :keymaps 'rspec-compilation-mode-map
    :states 'normal
    :prefix leader
    "rx" 'inf-ruby-switch-from-compilation))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rspec-mode
  :custom
  (rspec-use-spring-when-possible nil)
  (rspec-use-zeus-when-possible nil)
  :config
  (add-hook 'after-init-hook 'inf-ruby-switch-setup)
  (general-define-key
    :states 'normal
    :prefix leader
    "rtt" 'rspec-toggle-spec-and-target
    "rtf" 'rspec-verify
    "rtm" 'rspec-verify-matching
    "rtn" 'rspec-verify-single))
#+END_SRC

Clojure cider

#+BEGIN_SRC emacs-lisp
(use-package cider
)
#+END_SRC

** Writing

[[https://github.com/bnbeckwith/writegood-mode][Write Good]].

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :config
  (add-hook 'org-mode-hook 'writegood-mode)
)

(use-package fountain-mode
  :custom
  (fountain-mode-hook '(visual-line-mode
          which-function-mode
          fountain-pagination-update
          ))
  :custom-face
  (fountain ((t :family "Courier Prime"
                :height 1.2
                )))
)

(use-package olivetti
  :custom
  (olivetti-style 'fancy)
  :config
  (add-hook 'fountain-mode-hook 'olivetti-mode)
)
#+END_SRC

** Keybindings

Hydra.

#+BEGIN_SRC emacs-lisp
    (use-package hydra
      :config
      (defhydra hydra-tabs-select (:timeout 4)
        "Select tabs"
        ("n" awesome-tab-forward "next")
        ("p" awesome-tab-backward "previous")
        ("l" awesome-tab-select-end-tab "last")
        ("f" awesome-tab-select-beg-tab "first")
        ("q" nil "quit" :exit t)
      )
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (general-create-definer my/global-leader
     :states '(normal insert emacs)
     :prefix leader
    )

   (general-create-definer my/normal-leader
     :states '(normal)
     :prefix leader
    )

   (my/normal-leader
     "b" '(:ignore t :which-key "buffers/tabs")
     "bg" '(awesome-tab-switch-group :which-key "Show groups")
     "bn" '(awesome-tab-forward :which-key "Select next tab")
     "bp" '(awesome-tab-backward :which-key "Select previous tab")
     "bl" '(awesome-tab-select-end-tab :which-key "Select last tab")
     "bf" '(awesome-tab-select-beg-tab :which-key "Select first tab")
     "bd" '(kill-this-buffer :which-key "Close current tab")
     "bx" '(awesome-tab-kill-other-buffers-in-current-group :which-key "Close other tabs")
     "C-h" '(helpful-at-point :which-key "Show help at point")
     "st" '(hydra-tabs-select/body :which-key "Select tabs")
   )
#+END_SRC

* Fun
** Nyan-cat

[[https://github.com/TeMPOraL/nyan-mode][Nyan cat]] in the tray.

#+BEGIN_SRC emacs-lisp
;; (use-package nyan-mode
  ;; (setq nyan-wavy-trail t
  ;;       nyan-animate-nyancat t)
  ;; :config
  ;; (nyan-mode))
#+END_SRC

* TODOs
* Problems to solve
** TODO .dir-locals.el with ranger
It just freezes. Fix that.
** DONE emacsclient from mac os launchpad
For now I use function with focus on frame.
** TODO eshell at-point-autocomplete(or maybe use term)
** DONE disable TABing eshell in modes other than org
** DONE emacs --daemon doesn't open files
Strange thing with termcap. "Device is not a termcap terminal device".
Happend to be some bug with evil mode post-command-hook (evil-mode-check-buffers).
[[#evil-daemon]] - caused problem. I gotta look into how to make it lazy.
** DONE emacs --daemon doesn't know about projects at startup
Related to evil stuff. [[#evil-daemon]] problem.
